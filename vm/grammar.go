/* A recursive-descent parser generated by peg 0.1.2 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 56

#include <stdlib.h>
#include "tr.h"
#include "internal.h"

/*#define YY_DEBUG 1*/

#define YYSTYPE   OBJ
#define YYMALLOC  TR_MALLOC
#define YYREALLOC TR_REALLOC
#define yyvm      compiler->vm

static char *charbuf;
static char *sbuf;
static size_t nbuf;
static TrCompiler *compiler;

#define YY_INPUT(buf, result, max_size) { \
  int yyc; \
  if (charbuf && *charbuf != '\0') \
    yyc= *charbuf++; \
  else \
    yyc= EOF; \
  result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1); \
}

/* TODO grow buffer */
#define STRING_MAX   4096
#define STRING_START sbuf = TR_ALLOC_N(char, STRING_MAX); nbuf = 0
#define STRING_PUSH(P,L) \
  assert(nbuf + (L) < 4096); \
  TR_MEMCPY_N(sbuf + nbuf, (P), char, (L)); \
  nbuf += (L)


#ifndef YY_VARIABLE
#define YY_VARIABLE(T)	static T
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yybegin= yypos, 1)
#endif
#ifndef YY_END
#define YY_END		( yyend= yypos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#ifndef YYMALLOC
#define YYMALLOC malloc
#endif
#ifndef YYREALLOC
#define YYREALLOC realloc
#endif

#ifndef YY_PART

typedef void (*yyaction)(char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

YY_VARIABLE(char *   ) yybuf= 0;
YY_VARIABLE(int	     ) yybuflen= 0;
YY_VARIABLE(int	     ) yypos= 0;
YY_VARIABLE(int	     ) yylimit= 0;
YY_VARIABLE(char *   ) yytext= 0;
YY_VARIABLE(int	     ) yytextlen= 0;
YY_VARIABLE(int	     ) yybegin= 0;
YY_VARIABLE(int	     ) yyend= 0;
YY_VARIABLE(int	     ) yytextmax= 0;
YY_VARIABLE(yythunk *) yythunks= 0;
YY_VARIABLE(int	     ) yythunkslen= 0;
YY_VARIABLE(int      ) yythunkpos= 0;
YY_VARIABLE(YYSTYPE  ) yy;
YY_VARIABLE(YYSTYPE *) yyval= 0;
YY_VARIABLE(YYSTYPE *) yyvals= 0;
YY_VARIABLE(int      ) yyvalslen= 0;

YY_LOCAL(int) yyrefill(void)
{
  int yyn;
  while (yybuflen - yypos < 512)
    {
      yybuflen *= 2;
      yybuf= YYREALLOC(yybuf, yybuflen);
    }
  YY_INPUT((yybuf + yypos), yyn, (yybuflen - yypos));
  if (!yyn) return 0;
  yylimit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(void)
{
  if (yypos >= yylimit && !yyrefill()) return 0;
  ++yypos;
  return 1;
}

YY_LOCAL(int) yymatchChar(int c)
{
  if (yypos >= yylimit && !yyrefill()) return 0;
  if (yybuf[yypos] == c)
    {
      ++yypos;
      yyprintf((stderr, "  ok   yymatchChar(%c) @ %s\n", c, yybuf+yypos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(%c) @ %s\n", c, yybuf+yypos));
  return 0;
}

YY_LOCAL(int) yymatchString(char *s)
{
  int yysav= yypos;
  while (*s)
    {
      if (yypos >= yylimit && !yyrefill()) return 0;
      if (yybuf[yypos] != *s)
        {
          yypos= yysav;
          return 0;
        }
      ++s;
      ++yypos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(unsigned char *bits)
{
  int c;
  if (yypos >= yylimit && !yyrefill()) return 0;
  c= yybuf[yypos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yypos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yybuf+yypos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yybuf+yypos));
  return 0;
}

YY_LOCAL(void) yyDo(yyaction action, int begin, int end)
{
  while (yythunkpos >= yythunkslen)
    {
      yythunkslen *= 2;
      yythunks= YYREALLOC(yythunks, sizeof(yythunk) * yythunkslen);
    }
  yythunks[yythunkpos].begin=  begin;
  yythunks[yythunkpos].end=    end;
  yythunks[yythunkpos].action= action;
  ++yythunkpos;
}

YY_LOCAL(int) yyText(int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yytextlen < (yyleng - 1))
	{
	  yytextlen *= 2;
	  yytext= YYREALLOC(yytext, yytextlen);
	}
      memcpy(yytext, yybuf + begin, yyleng);
    }
  yytext[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(void)
{
  int pos;
  for (pos= 0;  pos < yythunkpos;  ++pos)
    {
      yythunk *thunk= &yythunks[pos];
      int yyleng= thunk->end ? yyText(thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yytext));
      thunk->action(yytext, yyleng);
    }
  yythunkpos= 0;
}

YY_LOCAL(void) yyCommit()
{
  if ((yylimit -= yypos))
    {
      memmove(yybuf, yybuf + yypos, yylimit);
    }
  yybegin -= yypos;
  yyend -= yypos;
  yypos= yythunkpos= 0;
}

YY_LOCAL(int) yyAccept(int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone();
      yyCommit();
    }
  return 1;
}

YY_LOCAL(void) yyPush(char *text, int count)	{ (void)text; yyval += count; }
YY_LOCAL(void) yyPop(char *text, int count)	{ (void)text; yyval -= count; }
YY_LOCAL(void) yySet(char *text, int count)	{ (void)text; yyval[count]= yy; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yythunkpos0)

YY_RULE(int) yy_ESC_CHAR(); /* 56 */
YY_RULE(int) yy_UNOP(); /* 55 */
YY_RULE(int) yy_NAME(); /* 54 */
YY_RULE(int) yy_KEYWORD(); /* 53 */
YY_RULE(int) yy_HashItems(); /* 52 */
YY_RULE(int) yy_STRING2(); /* 51 */
YY_RULE(int) yy_STRING1(); /* 50 */
YY_RULE(int) yy_REGEXP(); /* 49 */
YY_RULE(int) yy_SYMBOL(); /* 48 */
YY_RULE(int) yy_NUMBER(); /* 47 */
YY_RULE(int) yy_AryItems(); /* 46 */
YY_RULE(int) yy_Param(); /* 45 */
YY_RULE(int) yy_METHOD(); /* 44 */
YY_RULE(int) yy_Method(); /* 43 */
YY_RULE(int) yy_Else(); /* 42 */
YY_RULE(int) yy_GLOBAL(); /* 41 */
YY_RULE(int) yy_CVAR(); /* 40 */
YY_RULE(int) yy_IVAR(); /* 39 */
YY_RULE(int) yy_CONST(); /* 38 */
YY_RULE(int) yy_Params(); /* 37 */
YY_RULE(int) yy_SPACE(); /* 36 */
YY_RULE(int) yy_BINOP(); /* 35 */
YY_RULE(int) yy_Args(); /* 34 */
YY_RULE(int) yy_Receiver(); /* 33 */
YY_RULE(int) yy_ASSIGN(); /* 32 */
YY_RULE(int) yy_ID(); /* 31 */
YY_RULE(int) yy_Block(); /* 30 */
YY_RULE(int) yy_Message(); /* 29 */
YY_RULE(int) yy_EOL(); /* 28 */
YY_RULE(int) yy_Value(); /* 27 */
YY_RULE(int) yy_Break(); /* 26 */
YY_RULE(int) yy_Return(); /* 25 */
YY_RULE(int) yy_Yield(); /* 24 */
YY_RULE(int) yy_Range(); /* 23 */
YY_RULE(int) yy_Call(); /* 22 */
YY_RULE(int) yy_SpecCall(); /* 21 */
YY_RULE(int) yy_BinOp(); /* 20 */
YY_RULE(int) yy_UnaryOp(); /* 19 */
YY_RULE(int) yy_AsgnCall(); /* 18 */
YY_RULE(int) yy_Assign(); /* 17 */
YY_RULE(int) yy_Expr(); /* 16 */
YY_RULE(int) yy_Module(); /* 15 */
YY_RULE(int) yy_Class(); /* 14 */
YY_RULE(int) yy_Def(); /* 13 */
YY_RULE(int) yy_Unless(); /* 12 */
YY_RULE(int) yy_If(); /* 11 */
YY_RULE(int) yy_Until(); /* 10 */
YY_RULE(int) yy_While(); /* 9 */
YY_RULE(int) yy_OptStmts(); /* 8 */
YY_RULE(int) yy_Comment(); /* 7 */
YY_RULE(int) yy_Stmt(); /* 6 */
YY_RULE(int) yy__(); /* 5 */
YY_RULE(int) yy_SEP(); /* 4 */
YY_RULE(int) yy_EOF(); /* 3 */
YY_RULE(int) yy_Stmts(); /* 2 */
YY_RULE(int) yy_Root(); /* 1 */

YY_ACTION(void) yy_1_EOL(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_EOL\n"));
   compiler->line++ ;
}
YY_ACTION(void) yy_3_REGEXP(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_3_REGEXP\n"));
   yy = TrRegexp_new(yyvm, sbuf, 0) ;
}
YY_ACTION(void) yy_2_REGEXP(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_2_REGEXP\n"));
   STRING_PUSH(yytext, yyleng) ;
}
YY_ACTION(void) yy_1_REGEXP(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_REGEXP\n"));
   STRING_START ;
}
YY_ACTION(void) yy_3_STRING2(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_3_STRING2\n"));
   yy = TrString_new2(yyvm, sbuf) ;
}
YY_ACTION(void) yy_2_STRING2(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_2_STRING2\n"));
   STRING_PUSH(yytext, yyleng) ;
}
YY_ACTION(void) yy_1_STRING2(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_STRING2\n"));
   STRING_START ;
}
YY_ACTION(void) yy_7_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_7_ESC_CHAR\n"));
   STRING_PUSH("\\", 1) ;
}
YY_ACTION(void) yy_6_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_6_ESC_CHAR\n"));
   STRING_PUSH("\"", 1) ;
}
YY_ACTION(void) yy_5_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_5_ESC_CHAR\n"));
   STRING_PUSH("\t", 1) ;
}
YY_ACTION(void) yy_4_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_4_ESC_CHAR\n"));
   STRING_PUSH("\r", 1) ;
}
YY_ACTION(void) yy_3_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_3_ESC_CHAR\n"));
   STRING_PUSH("\f", 1) ;
}
YY_ACTION(void) yy_2_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_2_ESC_CHAR\n"));
   STRING_PUSH("\b", 1) ;
}
YY_ACTION(void) yy_1_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_ESC_CHAR\n"));
   STRING_PUSH("\n", 1) ;
}
YY_ACTION(void) yy_4_STRING1(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_4_STRING1\n"));
   yy = TrString_new2(yyvm, sbuf) ;
}
YY_ACTION(void) yy_3_STRING1(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_3_STRING1\n"));
   STRING_PUSH(yytext, yyleng) ;
}
YY_ACTION(void) yy_2_STRING1(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_2_STRING1\n"));
   STRING_PUSH("'", 1) ;
}
YY_ACTION(void) yy_1_STRING1(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_STRING1\n"));
   STRING_START ;
}
YY_ACTION(void) yy_1_SYMBOL(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_SYMBOL\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_NUMBER(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_NUMBER\n"));
   yy = TR_INT2FIX(atoi(yytext)) ;
}
YY_ACTION(void) yy_1_GLOBAL(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_GLOBAL\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_CVAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_CVAR\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_IVAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_IVAR\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_ASSIGN(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_ASSIGN\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_UNOP(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_UNOP\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_BINOP(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_BINOP\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_CONST(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_CONST\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_3_ID(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_3_ID\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_2_ID(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_2_ID\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_ID(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_ID\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_4_HashItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define key yyval[-1]
#define val yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_4_HashItems\n"));
   yy = head ;
#undef key
#undef val
#undef head
}
YY_ACTION(void) yy_3_HashItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define key yyval[-1]
#define val yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_3_HashItems\n"));
   PUSH_NODE(head, val) ;
#undef key
#undef val
#undef head
}
YY_ACTION(void) yy_2_HashItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define key yyval[-1]
#define val yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_2_HashItems\n"));
   PUSH_NODE(head, key) ;
#undef key
#undef val
#undef head
}
YY_ACTION(void) yy_1_HashItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define key yyval[-1]
#define val yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_1_HashItems\n"));
   head = NODES_N(2, head, val) ;
#undef key
#undef val
#undef head
}
YY_ACTION(void) yy_3_AryItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_3_AryItems\n"));
   yy = head ;
#undef tail
#undef head
}
YY_ACTION(void) yy_2_AryItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_2_AryItems\n"));
   PUSH_NODE(head, tail) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_1_AryItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_1_AryItems\n"));
   head = NODES(head) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_17_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_17_Value\n"));
   yy = NODE(HASH, items) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_16_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_16_Value\n"));
   yy = NODE(HASH, NODES_N(0)) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_15_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_15_Value\n"));
   yy = NODE(ARRAY, items) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_14_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_14_Value\n"));
   yy = NODE(ARRAY, NODES_N(0)) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_13_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_13_Value\n"));
   yy = NODE(GETGLOBAL, name) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_12_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_12_Value\n"));
   yy = NODE(GETCVAR, name) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_11_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_11_Value\n"));
   yy = NODE(GETIVAR, name) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_10_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_10_Value\n"));
   yy = NODE(SELF, 0) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_9_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_9_Value\n"));
   yy = NODE(BOOL, TR_FALSE) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_8_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_8_Value\n"));
   yy = NODE(BOOL, TR_TRUE) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_7_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_7_Value\n"));
   yy = NODE(NIL, 0) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_6_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_6_Value\n"));
   yy = NODE(CONST, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_5_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_5_Value\n"));
   yy = NODE(STRING, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_4_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_4_Value\n"));
   yy = NODE(STRING, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_3_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_3_Value\n"));
   yy = NODE(VALUE, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_2_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_2_Value\n"));
   yy = NODE(VALUE, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_1_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_1_Value\n"));
   yy = NODE(VALUE, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_1_Break(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_Break\n"));
   yy = NODE(BREAK, 0) ;
}
YY_ACTION(void) yy_5_Return(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define arg yyval[-2]
  yyprintf((stderr, "do yy_5_Return\n"));
   yy = NODE(RETURN, 0) ;
#undef args
#undef arg
}
YY_ACTION(void) yy_4_Return(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define arg yyval[-2]
  yyprintf((stderr, "do yy_4_Return\n"));
   yy = NODE(RETURN, NODE(ARRAY, args)) ;
#undef args
#undef arg
}
YY_ACTION(void) yy_3_Return(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define arg yyval[-2]
  yyprintf((stderr, "do yy_3_Return\n"));
   yy = NODE(RETURN, NODE(ARRAY, args)) ;
#undef args
#undef arg
}
YY_ACTION(void) yy_2_Return(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define arg yyval[-2]
  yyprintf((stderr, "do yy_2_Return\n"));
   yy = NODE(RETURN, arg) ;
#undef args
#undef arg
}
YY_ACTION(void) yy_1_Return(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define arg yyval[-2]
  yyprintf((stderr, "do yy_1_Return\n"));
   yy = NODE(RETURN, arg) ;
#undef args
#undef arg
}
YY_ACTION(void) yy_3_Yield(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
  yyprintf((stderr, "do yy_3_Yield\n"));
   yy = NODE(YIELD, NODES_N(0)) ;
#undef args
}
YY_ACTION(void) yy_2_Yield(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
  yyprintf((stderr, "do yy_2_Yield\n"));
   yy = NODE(YIELD, args) ;
#undef args
}
YY_ACTION(void) yy_1_Yield(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
  yyprintf((stderr, "do yy_1_Yield\n"));
   yy = NODE(YIELD, args) ;
#undef args
}
YY_ACTION(void) yy_2_Range(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define e yyval[-1]
#define s yyval[-2]
  yyprintf((stderr, "do yy_2_Range\n"));
   yy = NODE3(RANGE, s, e, 1) ;
#undef e
#undef s
}
YY_ACTION(void) yy_1_Range(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define e yyval[-1]
#define s yyval[-2]
  yyprintf((stderr, "do yy_1_Range\n"));
   yy = NODE3(RANGE, s, e, 0) ;
#undef e
#undef s
}
YY_ACTION(void) yy_1_Module(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_1_Module\n"));
   yy = NODE3(MODULE, name, 0, body) ;
#undef body
#undef name
}
YY_ACTION(void) yy_2_Class(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define super yyval[-2]
#define name yyval[-3]
  yyprintf((stderr, "do yy_2_Class\n"));
   yy = NODE3(CLASS, name, super, body) ;
#undef body
#undef super
#undef name
}
YY_ACTION(void) yy_1_Class(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define super yyval[-2]
#define name yyval[-3]
  yyprintf((stderr, "do yy_1_Class\n"));
   super = 0 ;
#undef body
#undef super
#undef name
}
YY_ACTION(void) yy_3_Param(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define def yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_3_Param\n"));
   yy = NODE2(PARAM, name, 1) ;
#undef def
#undef name
}
YY_ACTION(void) yy_2_Param(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define def yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_2_Param\n"));
   yy = NODE(PARAM, name) ;
#undef def
#undef name
}
YY_ACTION(void) yy_1_Param(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define def yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_1_Param\n"));
   yy = NODE3(PARAM, name, 0, def) ;
#undef def
#undef name
}
YY_ACTION(void) yy_3_Params(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_3_Params\n"));
   yy = head ;
#undef tail
#undef head
}
YY_ACTION(void) yy_2_Params(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_2_Params\n"));
   PUSH_NODE(head, tail) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_1_Params(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_1_Params\n"));
   head = NODES(head) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_2_Def(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define params yyval[-2]
#define method yyval[-3]
  yyprintf((stderr, "do yy_2_Def\n"));
   yy = NODE3(DEF, method, params ? params : NODES_N(0), body) ;
#undef body
#undef params
#undef method
}
YY_ACTION(void) yy_1_Def(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define params yyval[-2]
#define method yyval[-3]
  yyprintf((stderr, "do yy_1_Def\n"));
   params = 0 ;
#undef body
#undef params
#undef method
}
YY_ACTION(void) yy_3_Method(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define name yyval[-1]
#define rcv yyval[-2]
  yyprintf((stderr, "do yy_3_Method\n"));
   yy = NODE2(METHOD, 0, name) ;
#undef name
#undef rcv
}
YY_ACTION(void) yy_2_Method(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define name yyval[-1]
#define rcv yyval[-2]
  yyprintf((stderr, "do yy_2_Method\n"));
   yy = NODE2(METHOD, rcv, name) ;
#undef name
#undef rcv
}
YY_ACTION(void) yy_1_Method(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define name yyval[-1]
#define rcv yyval[-2]
  yyprintf((stderr, "do yy_1_Method\n"));
   yy = NODE2(METHOD, NODE2(SEND, 0, NODE(MSG, rcv)), name) ;
#undef name
#undef rcv
}
YY_ACTION(void) yy_1_Else(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
  yyprintf((stderr, "do yy_1_Else\n"));
   yy = body ;
#undef body
}
YY_ACTION(void) yy_3_Unless(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_3_Unless\n"));
   yy = NODE2(UNLESS, cond, NODES(body)) ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_2_Unless(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_2_Unless\n"));
   yy = NODE3(UNLESS, cond, body, else_body) ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_1_Unless(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_1_Unless\n"));
   else_body = 0 ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_3_If(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_3_If\n"));
   yy = NODE2(IF, cond, NODES(body)) ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_2_If(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_2_If\n"));
   yy = NODE3(IF, cond, body, else_body) ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_1_If(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_1_If\n"));
   else_body = 0 ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_1_Until(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define cond yyval[-2]
  yyprintf((stderr, "do yy_1_Until\n"));
   yy = NODE2(UNTIL, cond, body) ;
#undef body
#undef cond
}
YY_ACTION(void) yy_1_While(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define cond yyval[-2]
  yyprintf((stderr, "do yy_1_While\n"));
   yy = NODE2(WHILE, cond, body) ;
#undef body
#undef cond
}
YY_ACTION(void) yy_5_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_5_Assign\n"));
   yy = NODE2(SETGLOBAL, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_4_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_4_Assign\n"));
   yy = NODE2(SETCVAR, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_3_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_3_Assign\n"));
   yy = NODE2(SETIVAR, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_2_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_2_Assign\n"));
   yy = NODE2(SETCONST, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_1_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_1_Assign\n"));
   yy = NODE2(ASSIGN, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_2_Block(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define params yyval[-1]
#define body yyval[-2]
  yyprintf((stderr, "do yy_2_Block\n"));
   yy = NODE2(BLOCK, body, params) ;
#undef params
#undef body
}
YY_ACTION(void) yy_1_Block(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define params yyval[-1]
#define body yyval[-2]
  yyprintf((stderr, "do yy_1_Block\n"));
   yy = NODE(BLOCK, body) ;
#undef params
#undef body
}
YY_ACTION(void) yy_5_Args(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define splat yyval[-1]
#define tail yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_5_Args\n"));
   yy = NODES(NODE2(ARG, splat, 1)) ;
#undef splat
#undef tail
#undef head
}
YY_ACTION(void) yy_4_Args(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define splat yyval[-1]
#define tail yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_4_Args\n"));
   yy = head ;
#undef splat
#undef tail
#undef head
}
YY_ACTION(void) yy_3_Args(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define splat yyval[-1]
#define tail yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_3_Args\n"));
   PUSH_NODE(head, NODE2(ARG, splat, 1)) ;
#undef splat
#undef tail
#undef head
}
YY_ACTION(void) yy_2_Args(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define splat yyval[-1]
#define tail yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_2_Args\n"));
   PUSH_NODE(head, NODE(ARG, tail)) ;
#undef splat
#undef tail
#undef head
}
YY_ACTION(void) yy_1_Args(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define splat yyval[-1]
#define tail yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_1_Args\n"));
   head = NODES(NODE(ARG, head)) ;
#undef splat
#undef tail
#undef head
}
YY_ACTION(void) yy_2_Message(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_2_Message\n"));
   yy = NODE2(MSG, name, args) ;
#undef args
#undef name
}
YY_ACTION(void) yy_1_Message(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_1_Message\n"));
   args = 0 ;
#undef args
#undef name
}
YY_ACTION(void) yy_2_UnaryOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define rcv yyval[-1]
  yyprintf((stderr, "do yy_2_UnaryOp\n"));
   yy = NODE(NOT, rcv) ;
#undef rcv
}
YY_ACTION(void) yy_1_UnaryOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define rcv yyval[-1]
  yyprintf((stderr, "do yy_1_UnaryOp\n"));
   yy = NODE(NEG, rcv) ;
#undef rcv
}
YY_ACTION(void) yy_6_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_6_BinOp\n"));
   yy = NODE2(SEND, rcv, NODE2(MSG, op, NODES(NODE(ARG, arg)))) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_5_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_5_BinOp\n"));
   yy = NODE2(LT, rcv, arg) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_4_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_4_BinOp\n"));
   yy = NODE2(SUB, rcv, arg) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_3_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_3_BinOp\n"));
   yy = NODE2(ADD, rcv, arg) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_2_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_2_BinOp\n"));
   yy = NODE2(OR, rcv, arg) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_1_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_1_BinOp\n"));
   yy = NODE2(AND, rcv, arg) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_2_SpecCall(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define args yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_2_SpecCall\n"));
   yy = NODE2(SEND, rcv, NODE2(MSG, TrSymbol_new(yyvm, "[]"), args)) ;
#undef val
#undef args
#undef rcv
}
YY_ACTION(void) yy_1_SpecCall(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define args yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_1_SpecCall\n"));
   PUSH_NODE(args, NODE(ARG, val)); yy = NODE2(SEND, rcv, NODE2(MSG, TrSymbol_new(yyvm, "[]="), args)) ;
#undef val
#undef args
#undef rcv
}
YY_ACTION(void) yy_2_Receiver(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define rcv yyval[-1]
  yyprintf((stderr, "do yy_2_Receiver\n"));
   yy = rcv ;
#undef rcv
}
YY_ACTION(void) yy_1_Receiver(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define rcv yyval[-1]
  yyprintf((stderr, "do yy_1_Receiver\n"));
   rcv = 0 ;
#undef rcv
}
YY_ACTION(void) yy_3_AsgnCall(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define asg yyval[-2]
#define msg yyval[-3]
#define rmsg yyval[-4]
#define rcv yyval[-5]
  yyprintf((stderr, "do yy_3_AsgnCall\n"));
   VM = yyvm; yy = NODE2(SEND, rcv, NODE2(MSG, SYMCAT(msg, asg), NODES(NODE(ARG, val)))) ;
#undef val
#undef asg
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_2_AsgnCall(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define asg yyval[-2]
#define msg yyval[-3]
#define rmsg yyval[-4]
#define rcv yyval[-5]
  yyprintf((stderr, "do yy_2_AsgnCall\n"));
   rcv = NODE2(SEND, rcv, rmsg) ;
#undef val
#undef asg
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_1_AsgnCall(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define asg yyval[-2]
#define msg yyval[-3]
#define rmsg yyval[-4]
#define rcv yyval[-5]
  yyprintf((stderr, "do yy_1_AsgnCall\n"));
   rcv = 0 ;
#undef val
#undef asg
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_3_Call(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define block yyval[-1]
#define msg yyval[-2]
#define rmsg yyval[-3]
#define rcv yyval[-4]
  yyprintf((stderr, "do yy_3_Call\n"));
   yy = NODE3(SEND, rcv, msg, block) ;
#undef block
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_2_Call(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define block yyval[-1]
#define msg yyval[-2]
#define rmsg yyval[-3]
#define rcv yyval[-4]
  yyprintf((stderr, "do yy_2_Call\n"));
   rcv = NODE2(SEND, rcv, rmsg) ;
#undef block
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_1_Call(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define block yyval[-1]
#define msg yyval[-2]
#define rmsg yyval[-3]
#define rcv yyval[-4]
  yyprintf((stderr, "do yy_1_Call\n"));
   block = rcv = 0 ;
#undef block
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_1_OptStmts(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_OptStmts\n"));
   yy = NODES_N(0) ;
}
YY_ACTION(void) yy_4_Stmts(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_4_Stmts\n"));
   yy = NODES_N(0) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_3_Stmts(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_3_Stmts\n"));
   yy = head ;
#undef tail
#undef head
}
YY_ACTION(void) yy_2_Stmts(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_2_Stmts\n"));
   PUSH_NODE(head, tail) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_1_Stmts(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_1_Stmts\n"));
   head = NODES(head) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_1_Root(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define s yyval[-1]
  yyprintf((stderr, "do yy_1_Root\n"));
   compiler->node = NODE(ROOT, s) ;
#undef s
}

YY_RULE(int) yy_ESC_CHAR()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "ESC_CHAR"));
  {  int yypos2= yypos, yythunkpos2= yythunkpos;  if (!yymatchString("\\n")) goto l3;  yyDo(yy_1_ESC_CHAR, yybegin, yyend);  goto l2;
  l3:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\b")) goto l4;  yyDo(yy_2_ESC_CHAR, yybegin, yyend);  goto l2;
  l4:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\f")) goto l5;  yyDo(yy_3_ESC_CHAR, yybegin, yyend);  goto l2;
  l5:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\r")) goto l6;  yyDo(yy_4_ESC_CHAR, yybegin, yyend);  goto l2;
  l6:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\t")) goto l7;  yyDo(yy_5_ESC_CHAR, yybegin, yyend);  goto l2;
  l7:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\\"")) goto l8;  yyDo(yy_6_ESC_CHAR, yybegin, yyend);  goto l2;
  l8:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\\\")) goto l1;  yyDo(yy_7_ESC_CHAR, yybegin, yyend);
  }
  l2:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "ESC_CHAR", yybuf+yypos));
  return 1;
  l1:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ESC_CHAR", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_UNOP()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "UNOP"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l9;
  {  int yypos10= yypos, yythunkpos10= yythunkpos;  if (!yymatchString("-@")) goto l11;  goto l10;
  l11:;	  yypos= yypos10; yythunkpos= yythunkpos10;  if (!yymatchChar('!')) goto l9;
  }
  l10:;	  yyText(yybegin, yyend);  if (!(YY_END)) goto l9;  yyDo(yy_1_UNOP, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "UNOP", yybuf+yypos));
  return 1;
  l9:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "UNOP", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_NAME()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "NAME"));  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l12;
  l13:;	
  {  int yypos14= yypos, yythunkpos14= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l14;  goto l13;
  l14:;	  yypos= yypos14; yythunkpos= yythunkpos14;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "NAME", yybuf+yypos));
  return 1;
  l12:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "NAME", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_KEYWORD()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "KEYWORD"));
  {  int yypos16= yypos, yythunkpos16= yythunkpos;  if (!yymatchString("while")) goto l17;  goto l16;
  l17:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("until")) goto l18;  goto l16;
  l18:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("do")) goto l19;  goto l16;
  l19:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("end")) goto l20;  goto l16;
  l20:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("if")) goto l21;  goto l16;
  l21:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("unless")) goto l22;  goto l16;
  l22:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("else")) goto l23;  goto l16;
  l23:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("true")) goto l24;  goto l16;
  l24:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("false")) goto l25;  goto l16;
  l25:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("nil")) goto l26;  goto l16;
  l26:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("self")) goto l27;  goto l16;
  l27:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("class")) goto l28;  goto l16;
  l28:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("module")) goto l29;  goto l16;
  l29:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("def")) goto l30;  goto l16;
  l30:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("yield")) goto l31;  goto l16;
  l31:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("return")) goto l32;  goto l16;
  l32:;	  yypos= yypos16; yythunkpos= yythunkpos16;  if (!yymatchString("break")) goto l15;
  }
  l16:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "KEYWORD", yybuf+yypos));
  return 1;
  l15:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "KEYWORD", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_HashItems()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "HashItems"));  if (!yy_Expr()) goto l33;  yyDo(yySet, -3, 0);  if (!yy__()) goto l33;  if (!yymatchString("=>")) goto l33;  if (!yy__()) goto l33;  if (!yy_Expr()) goto l33;  yyDo(yySet, -2, 0);  yyDo(yy_1_HashItems, yybegin, yyend);
  l34:;	
  {  int yypos35= yypos, yythunkpos35= yythunkpos;  if (!yy__()) goto l35;  if (!yymatchChar(',')) goto l35;  if (!yy__()) goto l35;  if (!yy_Expr()) goto l35;  yyDo(yySet, -1, 0);  if (!yy__()) goto l35;  yyDo(yy_2_HashItems, yybegin, yyend);  if (!yymatchString("=>")) goto l35;  if (!yy__()) goto l35;  if (!yy_Expr()) goto l35;  yyDo(yySet, -2, 0);  yyDo(yy_3_HashItems, yybegin, yyend);  goto l34;
  l35:;	  yypos= yypos35; yythunkpos= yythunkpos35;
  }  yyDo(yy_4_HashItems, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "HashItems", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l33:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "HashItems", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_STRING2()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "STRING2"));  if (!yymatchChar('"')) goto l36;  yyDo(yy_1_STRING2, yybegin, yyend);
  l37:;	
  {  int yypos38= yypos, yythunkpos38= yythunkpos;
  {  int yypos39= yypos, yythunkpos39= yythunkpos;  if (!yy_ESC_CHAR()) goto l40;  goto l39;
  l40:;	  yypos= yypos39; yythunkpos= yythunkpos39;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l38;  if (!yymatchClass((unsigned char *)"\377\377\377\377\373\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")) goto l38;  yyText(yybegin, yyend);  if (!(YY_END)) goto l38;  yyDo(yy_2_STRING2, yybegin, yyend);
  }
  l39:;	  goto l37;
  l38:;	  yypos= yypos38; yythunkpos= yythunkpos38;
  }  if (!yymatchChar('"')) goto l36;  yyDo(yy_3_STRING2, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "STRING2", yybuf+yypos));
  return 1;
  l36:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "STRING2", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_STRING1()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "STRING1"));  if (!yymatchChar('\'')) goto l41;  yyDo(yy_1_STRING1, yybegin, yyend);
  l42:;	
  {  int yypos43= yypos, yythunkpos43= yythunkpos;
  {  int yypos44= yypos, yythunkpos44= yythunkpos;  if (!yymatchString("\\\'")) goto l45;  yyDo(yy_2_STRING1, yybegin, yyend);  goto l44;
  l45:;	  yypos= yypos44; yythunkpos= yythunkpos44;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l43;  if (!yymatchClass((unsigned char *)"\377\377\377\377\177\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")) goto l43;  yyText(yybegin, yyend);  if (!(YY_END)) goto l43;  yyDo(yy_3_STRING1, yybegin, yyend);
  }
  l44:;	  goto l42;
  l43:;	  yypos= yypos43; yythunkpos= yythunkpos43;
  }  if (!yymatchChar('\'')) goto l41;  yyDo(yy_4_STRING1, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "STRING1", yybuf+yypos));
  return 1;
  l41:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "STRING1", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_REGEXP()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "REGEXP"));  if (!yymatchChar('/')) goto l46;  yyDo(yy_1_REGEXP, yybegin, yyend);
  l47:;	
  {  int yypos48= yypos, yythunkpos48= yythunkpos;
  {  int yypos49= yypos, yythunkpos49= yythunkpos;  if (!yy_ESC_CHAR()) goto l50;  goto l49;
  l50:;	  yypos= yypos49; yythunkpos= yythunkpos49;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l48;  if (!yymatchClass((unsigned char *)"\377\377\377\377\377\177\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")) goto l48;  yyText(yybegin, yyend);  if (!(YY_END)) goto l48;  yyDo(yy_2_REGEXP, yybegin, yyend);
  }
  l49:;	  goto l47;
  l48:;	  yypos= yypos48; yythunkpos= yythunkpos48;
  }  if (!yymatchChar('/')) goto l46;  yyDo(yy_3_REGEXP, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "REGEXP", yybuf+yypos));
  return 1;
  l46:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "REGEXP", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_SYMBOL()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "SYMBOL"));  if (!yymatchChar(':')) goto l51;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l51;
  {  int yypos52= yypos, yythunkpos52= yythunkpos;  if (!yy_NAME()) goto l53;  goto l52;
  l53:;	  yypos= yypos52; yythunkpos= yythunkpos52;  if (!yy_KEYWORD()) goto l51;
  }
  l52:;	  yyText(yybegin, yyend);  if (!(YY_END)) goto l51;  yyDo(yy_1_SYMBOL, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "SYMBOL", yybuf+yypos));
  return 1;
  l51:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SYMBOL", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_NUMBER()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "NUMBER"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l54;  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l54;
  l55:;	
  {  int yypos56= yypos, yythunkpos56= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l56;  goto l55;
  l56:;	  yypos= yypos56; yythunkpos= yythunkpos56;
  }  yyText(yybegin, yyend);  if (!(YY_END)) goto l54;  yyDo(yy_1_NUMBER, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "NUMBER", yybuf+yypos));
  return 1;
  l54:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "NUMBER", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_AryItems()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "AryItems"));  if (!yy__()) goto l57;  if (!yy_Expr()) goto l57;  yyDo(yySet, -2, 0);  if (!yy__()) goto l57;  yyDo(yy_1_AryItems, yybegin, yyend);
  l58:;	
  {  int yypos59= yypos, yythunkpos59= yythunkpos;  if (!yymatchChar(',')) goto l59;  if (!yy__()) goto l59;  if (!yy_Expr()) goto l59;  yyDo(yySet, -1, 0);  if (!yy__()) goto l59;  yyDo(yy_2_AryItems, yybegin, yyend);  goto l58;
  l59:;	  yypos= yypos59; yythunkpos= yythunkpos59;
  }  yyDo(yy_3_AryItems, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "AryItems", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l57:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "AryItems", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Param()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Param"));
  {  int yypos61= yypos, yythunkpos61= yythunkpos;  if (!yy__()) goto l62;  if (!yy_ID()) goto l62;  yyDo(yySet, -2, 0);  if (!yy__()) goto l62;  if (!yymatchChar('=')) goto l62;  if (!yy__()) goto l62;  if (!yy_Expr()) goto l62;  yyDo(yySet, -1, 0);  yyDo(yy_1_Param, yybegin, yyend);  goto l61;
  l62:;	  yypos= yypos61; yythunkpos= yythunkpos61;  if (!yy__()) goto l63;  if (!yy_ID()) goto l63;  yyDo(yySet, -2, 0);  if (!yy__()) goto l63;  yyDo(yy_2_Param, yybegin, yyend);  goto l61;
  l63:;	  yypos= yypos61; yythunkpos= yythunkpos61;  if (!yy__()) goto l60;  if (!yymatchChar('*')) goto l60;  if (!yy_ID()) goto l60;  yyDo(yySet, -2, 0);  if (!yy__()) goto l60;  yyDo(yy_3_Param, yybegin, yyend);
  }
  l61:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Param", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l60:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Param", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_METHOD()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "METHOD"));
  {  int yypos65= yypos, yythunkpos65= yythunkpos;  if (!yy_ID()) goto l66;  goto l65;
  l66:;	  yypos= yypos65; yythunkpos= yythunkpos65;  if (!yy_UNOP()) goto l67;  goto l65;
  l67:;	  yypos= yypos65; yythunkpos= yythunkpos65;  if (!yy_BINOP()) goto l64;
  }
  l65:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "METHOD", yybuf+yypos));
  return 1;
  l64:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "METHOD", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Method()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Method"));
  {  int yypos69= yypos, yythunkpos69= yythunkpos;  if (!yy_ID()) goto l70;  yyDo(yySet, -2, 0);  if (!yymatchChar('.')) goto l70;  if (!yy_METHOD()) goto l70;  yyDo(yySet, -1, 0);  yyDo(yy_1_Method, yybegin, yyend);  goto l69;
  l70:;	  yypos= yypos69; yythunkpos= yythunkpos69;  if (!yy_Value()) goto l71;  yyDo(yySet, -2, 0);  if (!yymatchChar('.')) goto l71;  if (!yy_METHOD()) goto l71;  yyDo(yySet, -1, 0);  yyDo(yy_2_Method, yybegin, yyend);  goto l69;
  l71:;	  yypos= yypos69; yythunkpos= yythunkpos69;  if (!yy_METHOD()) goto l68;  yyDo(yySet, -1, 0);  yyDo(yy_3_Method, yybegin, yyend);
  }
  l69:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Method", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l68:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Method", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Else()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "Else"));  if (!yymatchString("else")) goto l72;  if (!yy_SEP()) goto l72;  if (!yy__()) goto l72;  if (!yy_Stmts()) goto l72;  yyDo(yySet, -1, 0);  if (!yy__()) goto l72;  yyDo(yy_1_Else, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Else", yybuf+yypos));  yyDo(yyPop, 1, 0);
  return 1;
  l72:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Else", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_GLOBAL()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "GLOBAL"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l73;  if (!yymatchChar('$')) goto l73;  if (!yy_NAME()) goto l73;  yyText(yybegin, yyend);  if (!(YY_END)) goto l73;  yyDo(yy_1_GLOBAL, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "GLOBAL", yybuf+yypos));
  return 1;
  l73:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "GLOBAL", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_CVAR()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "CVAR"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l74;  if (!yymatchString("@@")) goto l74;  if (!yy_NAME()) goto l74;  yyText(yybegin, yyend);  if (!(YY_END)) goto l74;  yyDo(yy_1_CVAR, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "CVAR", yybuf+yypos));
  return 1;
  l74:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CVAR", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_IVAR()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "IVAR"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l75;  if (!yymatchChar('@')) goto l75;  if (!yy_NAME()) goto l75;  yyText(yybegin, yyend);  if (!(YY_END)) goto l75;  yyDo(yy_1_IVAR, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "IVAR", yybuf+yypos));
  return 1;
  l75:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IVAR", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_CONST()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "CONST"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l76;  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l76;
  {  int yypos77= yypos, yythunkpos77= yythunkpos;  if (!yy_NAME()) goto l77;  goto l78;
  l77:;	  yypos= yypos77; yythunkpos= yythunkpos77;
  }
  l78:;	  yyText(yybegin, yyend);  if (!(YY_END)) goto l76;  yyDo(yy_1_CONST, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "CONST", yybuf+yypos));
  return 1;
  l76:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CONST", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Params()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Params"));  if (!yy_Param()) goto l79;  yyDo(yySet, -2, 0);  yyDo(yy_1_Params, yybegin, yyend);
  l80:;	
  {  int yypos81= yypos, yythunkpos81= yythunkpos;  if (!yymatchChar(',')) goto l81;  if (!yy_Param()) goto l81;  yyDo(yySet, -1, 0);  yyDo(yy_2_Params, yybegin, yyend);  goto l80;
  l81:;	  yypos= yypos81; yythunkpos= yythunkpos81;
  }  yyDo(yy_3_Params, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Params", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l79:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Params", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_SPACE()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "SPACE"));  if (!yymatchClass((unsigned char *)"\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l82;
  l83:;	
  {  int yypos84= yypos, yythunkpos84= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l84;  goto l83;
  l84:;	  yypos= yypos84; yythunkpos= yythunkpos84;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "SPACE", yybuf+yypos));
  return 1;
  l82:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SPACE", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_BINOP()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "BINOP"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l85;
  {  int yypos86= yypos, yythunkpos86= yythunkpos;  if (!yymatchString("**")) goto l87;  goto l86;
  l87:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchChar('^')) goto l88;  goto l86;
  l88:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchChar('&')) goto l89;  goto l86;
  l89:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchChar('|')) goto l90;  goto l86;
  l90:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchChar('~')) goto l91;  goto l86;
  l91:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchChar('+')) goto l92;  goto l86;
  l92:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchChar('-')) goto l93;  goto l86;
  l93:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchChar('*')) goto l94;  goto l86;
  l94:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchChar('/')) goto l95;  goto l86;
  l95:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchChar('%')) goto l96;  goto l86;
  l96:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchString("<=>")) goto l97;  goto l86;
  l97:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchString("<<")) goto l98;  goto l86;
  l98:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchString(">>")) goto l99;  goto l86;
  l99:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchString("==")) goto l100;  goto l86;
  l100:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchString("=~")) goto l101;  goto l86;
  l101:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchString("!=")) goto l102;  goto l86;
  l102:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchString("===")) goto l103;  goto l86;
  l103:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchChar('<')) goto l104;  goto l86;
  l104:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchChar('>')) goto l105;  goto l86;
  l105:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchString("<=")) goto l106;  goto l86;
  l106:;	  yypos= yypos86; yythunkpos= yythunkpos86;  if (!yymatchString(">=")) goto l85;
  }
  l86:;	  yyText(yybegin, yyend);  if (!(YY_END)) goto l85;  yyDo(yy_1_BINOP, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "BINOP", yybuf+yypos));
  return 1;
  l85:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "BINOP", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Args()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Args"));
  {  int yypos108= yypos, yythunkpos108= yythunkpos;  if (!yy__()) goto l109;  if (!yy_Expr()) goto l109;  yyDo(yySet, -3, 0);  if (!yy__()) goto l109;  yyDo(yy_1_Args, yybegin, yyend);
  l110:;	
  {  int yypos111= yypos, yythunkpos111= yythunkpos;  if (!yymatchChar(',')) goto l111;  if (!yy__()) goto l111;  if (!yy_Expr()) goto l111;  yyDo(yySet, -2, 0);  if (!yy__()) goto l111;  yyDo(yy_2_Args, yybegin, yyend);  goto l110;
  l111:;	  yypos= yypos111; yythunkpos= yythunkpos111;
  }
  {  int yypos112= yypos, yythunkpos112= yythunkpos;  if (!yymatchChar(',')) goto l112;  if (!yy__()) goto l112;  if (!yymatchChar('*')) goto l112;  if (!yy_Expr()) goto l112;  yyDo(yySet, -1, 0);  if (!yy__()) goto l112;  yyDo(yy_3_Args, yybegin, yyend);  goto l113;
  l112:;	  yypos= yypos112; yythunkpos= yythunkpos112;
  }
  l113:;	  yyDo(yy_4_Args, yybegin, yyend);  goto l108;
  l109:;	  yypos= yypos108; yythunkpos= yythunkpos108;  if (!yy__()) goto l107;  if (!yymatchChar('*')) goto l107;  if (!yy_Expr()) goto l107;  yyDo(yySet, -1, 0);  if (!yy__()) goto l107;  yyDo(yy_5_Args, yybegin, yyend);
  }
  l108:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Args", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l107:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Args", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Receiver()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "Receiver"));
  {  int yypos115= yypos, yythunkpos115= yythunkpos;  yyDo(yy_1_Receiver, yybegin, yyend);  if (!yy_Call()) goto l116;  yyDo(yySet, -1, 0);  goto l115;
  l116:;	  yypos= yypos115; yythunkpos= yythunkpos115;  if (!yy_Value()) goto l114;  yyDo(yySet, -1, 0);
  }
  l115:;	  yyDo(yy_2_Receiver, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Receiver", yybuf+yypos));  yyDo(yyPop, 1, 0);
  return 1;
  l114:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Receiver", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_ASSIGN()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "ASSIGN"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l117;  if (!yymatchChar('=')) goto l117;  yyText(yybegin, yyend);  if (!(YY_END)) goto l117;
  {  int yypos118= yypos, yythunkpos118= yythunkpos;
  {  int yypos119= yypos, yythunkpos119= yythunkpos;  if (!yymatchChar('=')) goto l119;  goto l117;
  l119:;	  yypos= yypos119; yythunkpos= yythunkpos119;
  }  yypos= yypos118; yythunkpos= yythunkpos118;
  }  yyDo(yy_1_ASSIGN, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "ASSIGN", yybuf+yypos));
  return 1;
  l117:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ASSIGN", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_ID()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "ID"));
  {  int yypos121= yypos, yythunkpos121= yythunkpos;
  {  int yypos123= yypos, yythunkpos123= yythunkpos;  if (!yymatchString("self")) goto l123;  goto l122;
  l123:;	  yypos= yypos123; yythunkpos= yythunkpos123;
  }  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l122;  if (!yy_KEYWORD()) goto l122;  yyText(yybegin, yyend);  if (!(YY_END)) goto l122;
  {  int yypos124= yypos, yythunkpos124= yythunkpos;
  {  int yypos125= yypos, yythunkpos125= yythunkpos;  if (!yymatchChar('.')) goto l126;  goto l125;
  l126:;	  yypos= yypos125; yythunkpos= yythunkpos125;  if (!yymatchChar('(')) goto l127;  goto l125;
  l127:;	  yypos= yypos125; yythunkpos= yythunkpos125;  if (!yymatchChar('[')) goto l122;
  }
  l125:;	  yypos= yypos124; yythunkpos= yythunkpos124;
  }  yyDo(yy_1_ID, yybegin, yyend);  goto l121;
  l122:;	  yypos= yypos121; yythunkpos= yythunkpos121;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l128;  if (!yy_KEYWORD()) goto l128;  if (!yy_NAME()) goto l128;  yyText(yybegin, yyend);  if (!(YY_END)) goto l128;  yyDo(yy_2_ID, yybegin, yyend);  goto l121;
  l128:;	  yypos= yypos121; yythunkpos= yythunkpos121;
  {  int yypos129= yypos, yythunkpos129= yythunkpos;  if (!yy_KEYWORD()) goto l129;  goto l120;
  l129:;	  yypos= yypos129; yythunkpos= yythunkpos129;
  }  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l120;  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\000\000\000\000\000\200\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l120;
  {  int yypos130= yypos, yythunkpos130= yythunkpos;  if (!yy_NAME()) goto l130;  goto l131;
  l130:;	  yypos= yypos130; yythunkpos= yythunkpos130;
  }
  l131:;	
  {  int yypos132= yypos, yythunkpos132= yythunkpos;
  {  int yypos134= yypos, yythunkpos134= yythunkpos;  if (!yymatchChar('=')) goto l135;
  {  int yypos136= yypos, yythunkpos136= yythunkpos;  if (!yymatchChar('(')) goto l135;  yypos= yypos136; yythunkpos= yythunkpos136;
  }  goto l134;
  l135:;	  yypos= yypos134; yythunkpos= yythunkpos134;  if (!yymatchChar('!')) goto l137;  goto l134;
  l137:;	  yypos= yypos134; yythunkpos= yythunkpos134;  if (!yymatchChar('?')) goto l132;
  }
  l134:;	  goto l133;
  l132:;	  yypos= yypos132; yythunkpos= yythunkpos132;
  }
  l133:;	  yyText(yybegin, yyend);  if (!(YY_END)) goto l120;  yyDo(yy_3_ID, yybegin, yyend);
  }
  l121:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "ID", yybuf+yypos));
  return 1;
  l120:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ID", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Block()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Block"));
  {  int yypos139= yypos, yythunkpos139= yythunkpos;  if (!yymatchString("do")) goto l140;  if (!yy_SEP()) goto l140;  if (!yy__()) goto l140;  if (!yy_OptStmts()) goto l140;  yyDo(yySet, -2, 0);  if (!yy__()) goto l140;  if (!yymatchString("end")) goto l140;  yyDo(yy_1_Block, yybegin, yyend);  goto l139;
  l140:;	  yypos= yypos139; yythunkpos= yythunkpos139;  if (!yymatchString("do")) goto l138;  if (!yy__()) goto l138;  if (!yymatchChar('|')) goto l138;  if (!yy_Params()) goto l138;  yyDo(yySet, -1, 0);  if (!yymatchChar('|')) goto l138;  if (!yy_SEP()) goto l138;  if (!yy__()) goto l138;  if (!yy_OptStmts()) goto l138;  yyDo(yySet, -2, 0);  if (!yy__()) goto l138;  if (!yymatchString("end")) goto l138;  yyDo(yy_2_Block, yybegin, yyend);
  }
  l139:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Block", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l138:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Block", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Message()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Message"));  if (!yy_ID()) goto l141;  yyDo(yySet, -2, 0);  yyDo(yy_1_Message, yybegin, yyend);
  {  int yypos142= yypos, yythunkpos142= yythunkpos;
  {  int yypos144= yypos, yythunkpos144= yythunkpos;  if (!yymatchChar('(')) goto l145;
  {  int yypos146= yypos, yythunkpos146= yythunkpos;  if (!yy_Args()) goto l146;  yyDo(yySet, -1, 0);  goto l147;
  l146:;	  yypos= yypos146; yythunkpos= yythunkpos146;
  }
  l147:;	  if (!yymatchChar(')')) goto l145;  goto l144;
  l145:;	  yypos= yypos144; yythunkpos= yythunkpos144;  if (!yy_SPACE()) goto l142;  if (!yy_Args()) goto l142;  yyDo(yySet, -1, 0);
  }
  l144:;	  goto l143;
  l142:;	  yypos= yypos142; yythunkpos= yythunkpos142;
  }
  l143:;	  yyDo(yy_2_Message, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Message", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l141:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Message", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_EOL()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "EOL"));
  {  int yypos149= yypos, yythunkpos149= yythunkpos;  if (!yymatchChar('\n')) goto l150;  goto l149;
  l150:;	  yypos= yypos149; yythunkpos= yythunkpos149;  if (!yymatchString("\r\n")) goto l151;  goto l149;
  l151:;	  yypos= yypos149; yythunkpos= yythunkpos149;  if (!yymatchChar('\r')) goto l148;
  }
  l149:;	  yyDo(yy_1_EOL, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "EOL", yybuf+yypos));
  return 1;
  l148:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOL", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Value()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Value"));
  {  int yypos153= yypos, yythunkpos153= yythunkpos;  if (!yy_NUMBER()) goto l154;  yyDo(yySet, -3, 0);  yyDo(yy_1_Value, yybegin, yyend);  goto l153;
  l154:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yy_SYMBOL()) goto l155;  yyDo(yySet, -3, 0);  yyDo(yy_2_Value, yybegin, yyend);  goto l153;
  l155:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yy_REGEXP()) goto l156;  yyDo(yySet, -3, 0);  yyDo(yy_3_Value, yybegin, yyend);  goto l153;
  l156:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yy_STRING1()) goto l157;  yyDo(yySet, -3, 0);  yyDo(yy_4_Value, yybegin, yyend);  goto l153;
  l157:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yy_STRING2()) goto l158;  yyDo(yySet, -3, 0);  yyDo(yy_5_Value, yybegin, yyend);  goto l153;
  l158:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yy_CONST()) goto l159;  yyDo(yySet, -3, 0);  yyDo(yy_6_Value, yybegin, yyend);  goto l153;
  l159:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yymatchString("nil")) goto l160;  yyDo(yy_7_Value, yybegin, yyend);  goto l153;
  l160:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yymatchString("true")) goto l161;  yyDo(yy_8_Value, yybegin, yyend);  goto l153;
  l161:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yymatchString("false")) goto l162;  yyDo(yy_9_Value, yybegin, yyend);  goto l153;
  l162:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yymatchString("self")) goto l163;  yyDo(yy_10_Value, yybegin, yyend);  goto l153;
  l163:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yy_IVAR()) goto l164;  yyDo(yySet, -2, 0);  yyDo(yy_11_Value, yybegin, yyend);  goto l153;
  l164:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yy_CVAR()) goto l165;  yyDo(yySet, -2, 0);  yyDo(yy_12_Value, yybegin, yyend);  goto l153;
  l165:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yy_GLOBAL()) goto l166;  yyDo(yySet, -2, 0);  yyDo(yy_13_Value, yybegin, yyend);  goto l153;
  l166:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yymatchChar('[')) goto l167;  if (!yy__()) goto l167;  if (!yymatchChar(']')) goto l167;  yyDo(yy_14_Value, yybegin, yyend);  goto l153;
  l167:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yymatchChar('[')) goto l168;  if (!yy__()) goto l168;  if (!yy_AryItems()) goto l168;  yyDo(yySet, -1, 0);  if (!yy__()) goto l168;  if (!yymatchChar(']')) goto l168;  yyDo(yy_15_Value, yybegin, yyend);  goto l153;
  l168:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yymatchChar('{')) goto l169;  if (!yy__()) goto l169;  if (!yymatchChar('}')) goto l169;  yyDo(yy_16_Value, yybegin, yyend);  goto l153;
  l169:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yymatchChar('{')) goto l170;  if (!yy__()) goto l170;  if (!yy_HashItems()) goto l170;  yyDo(yySet, -1, 0);  if (!yy__()) goto l170;  if (!yymatchChar('}')) goto l170;  yyDo(yy_17_Value, yybegin, yyend);  goto l153;
  l170:;	  yypos= yypos153; yythunkpos= yythunkpos153;  if (!yymatchChar('(')) goto l152;  if (!yy__()) goto l152;  if (!yy_Expr()) goto l152;  if (!yy__()) goto l152;  if (!yymatchChar(')')) goto l152;
  }
  l153:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Value", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l152:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Value", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Break()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Break"));  if (!yymatchString("break")) goto l171;  yyDo(yy_1_Break, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Break", yybuf+yypos));
  return 1;
  l171:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Break", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Return()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Return"));
  {  int yypos173= yypos, yythunkpos173= yythunkpos;  if (!yymatchString("return")) goto l174;  if (!yy_SPACE()) goto l174;  if (!yy_Expr()) goto l174;  yyDo(yySet, -2, 0);  if (!yy__()) goto l174;
  {  int yypos175= yypos, yythunkpos175= yythunkpos;  if (!yymatchChar(',')) goto l175;  goto l174;
  l175:;	  yypos= yypos175; yythunkpos= yythunkpos175;
  }  yyDo(yy_1_Return, yybegin, yyend);  goto l173;
  l174:;	  yypos= yypos173; yythunkpos= yythunkpos173;  if (!yymatchString("return")) goto l176;  if (!yymatchChar('(')) goto l176;  if (!yy_Expr()) goto l176;  yyDo(yySet, -2, 0);  if (!yymatchChar(')')) goto l176;  if (!yy__()) goto l176;
  {  int yypos177= yypos, yythunkpos177= yythunkpos;  if (!yymatchChar(',')) goto l177;  goto l176;
  l177:;	  yypos= yypos177; yythunkpos= yythunkpos177;
  }  yyDo(yy_2_Return, yybegin, yyend);  goto l173;
  l176:;	  yypos= yypos173; yythunkpos= yythunkpos173;  if (!yymatchString("return")) goto l178;  if (!yy_SPACE()) goto l178;  if (!yy_AryItems()) goto l178;  yyDo(yySet, -1, 0);  yyDo(yy_3_Return, yybegin, yyend);  goto l173;
  l178:;	  yypos= yypos173; yythunkpos= yythunkpos173;  if (!yymatchString("return")) goto l179;  if (!yymatchChar('(')) goto l179;  if (!yy_AryItems()) goto l179;  yyDo(yySet, -1, 0);  if (!yymatchChar(')')) goto l179;  yyDo(yy_4_Return, yybegin, yyend);  goto l173;
  l179:;	  yypos= yypos173; yythunkpos= yythunkpos173;  if (!yymatchString("return")) goto l172;  yyDo(yy_5_Return, yybegin, yyend);
  }
  l173:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Return", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l172:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Return", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Yield()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "Yield"));
  {  int yypos181= yypos, yythunkpos181= yythunkpos;  if (!yymatchString("yield")) goto l182;  if (!yy_SPACE()) goto l182;  if (!yy_AryItems()) goto l182;  yyDo(yySet, -1, 0);  yyDo(yy_1_Yield, yybegin, yyend);  goto l181;
  l182:;	  yypos= yypos181; yythunkpos= yythunkpos181;  if (!yymatchString("yield")) goto l183;  if (!yymatchChar('(')) goto l183;  if (!yy_AryItems()) goto l183;  yyDo(yySet, -1, 0);  if (!yymatchChar(')')) goto l183;  yyDo(yy_2_Yield, yybegin, yyend);  goto l181;
  l183:;	  yypos= yypos181; yythunkpos= yythunkpos181;  if (!yymatchString("yield")) goto l180;  yyDo(yy_3_Yield, yybegin, yyend);
  }
  l181:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Yield", yybuf+yypos));  yyDo(yyPop, 1, 0);
  return 1;
  l180:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Yield", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Range()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Range"));
  {  int yypos185= yypos, yythunkpos185= yythunkpos;  if (!yy_Receiver()) goto l186;  yyDo(yySet, -2, 0);  if (!yy__()) goto l186;  if (!yymatchString("..")) goto l186;  if (!yy__()) goto l186;  if (!yy_Expr()) goto l186;  yyDo(yySet, -1, 0);  yyDo(yy_1_Range, yybegin, yyend);  goto l185;
  l186:;	  yypos= yypos185; yythunkpos= yythunkpos185;  if (!yy_Receiver()) goto l184;  yyDo(yySet, -2, 0);  if (!yy__()) goto l184;  if (!yymatchString("...")) goto l184;  if (!yy__()) goto l184;  if (!yy_Expr()) goto l184;  yyDo(yySet, -1, 0);  yyDo(yy_2_Range, yybegin, yyend);
  }
  l185:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Range", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l184:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Range", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Call()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 4, 0);
  yyprintf((stderr, "%s\n", "Call"));  yyDo(yy_1_Call, yybegin, yyend);
  {  int yypos188= yypos, yythunkpos188= yythunkpos;  if (!yy_Value()) goto l188;  yyDo(yySet, -4, 0);  if (!yymatchChar('.')) goto l188;  goto l189;
  l188:;	  yypos= yypos188; yythunkpos= yythunkpos188;
  }
  l189:;	
  l190:;	
  {  int yypos191= yypos, yythunkpos191= yythunkpos;  if (!yy_Message()) goto l191;  yyDo(yySet, -3, 0);  if (!yymatchChar('.')) goto l191;  yyDo(yy_2_Call, yybegin, yyend);  goto l190;
  l191:;	  yypos= yypos191; yythunkpos= yythunkpos191;
  }  if (!yy_Message()) goto l187;  yyDo(yySet, -2, 0);  if (!yy__()) goto l187;
  {  int yypos192= yypos, yythunkpos192= yythunkpos;  if (!yy_Block()) goto l192;  yyDo(yySet, -1, 0);  goto l193;
  l192:;	  yypos= yypos192; yythunkpos= yythunkpos192;
  }
  l193:;	  yyDo(yy_3_Call, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Call", yybuf+yypos));  yyDo(yyPop, 4, 0);
  return 1;
  l187:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Call", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_SpecCall()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "SpecCall"));
  {  int yypos195= yypos, yythunkpos195= yythunkpos;  if (!yy_Receiver()) goto l196;  yyDo(yySet, -3, 0);  if (!yymatchChar('[')) goto l196;  if (!yy_Args()) goto l196;  yyDo(yySet, -2, 0);  if (!yymatchChar(']')) goto l196;  if (!yy__()) goto l196;  if (!yy_ASSIGN()) goto l196;  if (!yy__()) goto l196;  if (!yy_Stmt()) goto l196;  yyDo(yySet, -1, 0);  yyDo(yy_1_SpecCall, yybegin, yyend);  goto l195;
  l196:;	  yypos= yypos195; yythunkpos= yythunkpos195;  if (!yy_Receiver()) goto l194;  yyDo(yySet, -3, 0);  if (!yymatchChar('[')) goto l194;  if (!yy_Args()) goto l194;  yyDo(yySet, -2, 0);  if (!yymatchChar(']')) goto l194;  yyDo(yy_2_SpecCall, yybegin, yyend);
  }
  l195:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "SpecCall", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l194:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SpecCall", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_BinOp()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "BinOp"));
  {  int yypos198= yypos, yythunkpos198= yythunkpos;  if (!yy_SpecCall()) goto l199;  yyDo(yySet, -3, 0);  goto l198;
  l199:;	  yypos= yypos198; yythunkpos= yythunkpos198;  if (!yy_Receiver()) goto l197;  yyDo(yySet, -3, 0);
  }
  l198:;	  if (!yy__()) goto l197;
  {  int yypos200= yypos, yythunkpos200= yythunkpos;  if (!yymatchString("&&")) goto l201;  if (!yy__()) goto l201;  if (!yy_Expr()) goto l201;  yyDo(yySet, -2, 0);  yyDo(yy_1_BinOp, yybegin, yyend);  goto l200;
  l201:;	  yypos= yypos200; yythunkpos= yythunkpos200;  if (!yymatchString("||")) goto l202;  if (!yy__()) goto l202;  if (!yy_Expr()) goto l202;  yyDo(yySet, -2, 0);  yyDo(yy_2_BinOp, yybegin, yyend);  goto l200;
  l202:;	  yypos= yypos200; yythunkpos= yythunkpos200;  if (!yymatchChar('+')) goto l203;  if (!yy__()) goto l203;  if (!yy_Expr()) goto l203;  yyDo(yySet, -2, 0);  yyDo(yy_3_BinOp, yybegin, yyend);  goto l200;
  l203:;	  yypos= yypos200; yythunkpos= yythunkpos200;  if (!yymatchChar('-')) goto l204;  if (!yy__()) goto l204;  if (!yy_Expr()) goto l204;  yyDo(yySet, -2, 0);  yyDo(yy_4_BinOp, yybegin, yyend);  goto l200;
  l204:;	  yypos= yypos200; yythunkpos= yythunkpos200;  if (!yymatchChar('<')) goto l205;  if (!yy__()) goto l205;  if (!yy_Expr()) goto l205;  yyDo(yySet, -2, 0);  yyDo(yy_5_BinOp, yybegin, yyend);  goto l200;
  l205:;	  yypos= yypos200; yythunkpos= yythunkpos200;  if (!yy_BINOP()) goto l197;  yyDo(yySet, -1, 0);  if (!yy__()) goto l197;  if (!yy_Expr()) goto l197;  yyDo(yySet, -2, 0);  yyDo(yy_6_BinOp, yybegin, yyend);
  }
  l200:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "BinOp", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l197:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "BinOp", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_UnaryOp()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "UnaryOp"));
  {  int yypos207= yypos, yythunkpos207= yythunkpos;  if (!yymatchChar('-')) goto l208;  if (!yy_Expr()) goto l208;  yyDo(yySet, -1, 0);  yyDo(yy_1_UnaryOp, yybegin, yyend);  goto l207;
  l208:;	  yypos= yypos207; yythunkpos= yythunkpos207;  if (!yymatchChar('!')) goto l206;  if (!yy_Expr()) goto l206;  yyDo(yySet, -1, 0);  yyDo(yy_2_UnaryOp, yybegin, yyend);
  }
  l207:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "UnaryOp", yybuf+yypos));  yyDo(yyPop, 1, 0);
  return 1;
  l206:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "UnaryOp", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_AsgnCall()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 5, 0);
  yyprintf((stderr, "%s\n", "AsgnCall"));  yyDo(yy_1_AsgnCall, yybegin, yyend);
  {  int yypos210= yypos, yythunkpos210= yythunkpos;  if (!yy_Value()) goto l210;  yyDo(yySet, -5, 0);  if (!yymatchChar('.')) goto l210;  goto l211;
  l210:;	  yypos= yypos210; yythunkpos= yythunkpos210;
  }
  l211:;	
  l212:;	
  {  int yypos213= yypos, yythunkpos213= yythunkpos;  if (!yy_Message()) goto l213;  yyDo(yySet, -4, 0);  if (!yymatchChar('.')) goto l213;  yyDo(yy_2_AsgnCall, yybegin, yyend);  goto l212;
  l213:;	  yypos= yypos213; yythunkpos= yythunkpos213;
  }  if (!yy_ID()) goto l209;  yyDo(yySet, -3, 0);  if (!yy__()) goto l209;  if (!yy_ASSIGN()) goto l209;  yyDo(yySet, -2, 0);  if (!yy__()) goto l209;  if (!yy_Stmt()) goto l209;  yyDo(yySet, -1, 0);  yyDo(yy_3_AsgnCall, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "AsgnCall", yybuf+yypos));  yyDo(yyPop, 5, 0);
  return 1;
  l209:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "AsgnCall", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Assign()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Assign"));
  {  int yypos215= yypos, yythunkpos215= yythunkpos;  if (!yy_ID()) goto l216;  yyDo(yySet, -2, 0);  if (!yy__()) goto l216;  if (!yy_ASSIGN()) goto l216;  if (!yy__()) goto l216;  if (!yy_Stmt()) goto l216;  yyDo(yySet, -1, 0);  yyDo(yy_1_Assign, yybegin, yyend);  goto l215;
  l216:;	  yypos= yypos215; yythunkpos= yythunkpos215;  if (!yy_CONST()) goto l217;  yyDo(yySet, -2, 0);  if (!yy__()) goto l217;  if (!yy_ASSIGN()) goto l217;  if (!yy__()) goto l217;  if (!yy_Stmt()) goto l217;  yyDo(yySet, -1, 0);  yyDo(yy_2_Assign, yybegin, yyend);  goto l215;
  l217:;	  yypos= yypos215; yythunkpos= yythunkpos215;  if (!yy_IVAR()) goto l218;  yyDo(yySet, -2, 0);  if (!yy__()) goto l218;  if (!yy_ASSIGN()) goto l218;  if (!yy__()) goto l218;  if (!yy_Stmt()) goto l218;  yyDo(yySet, -1, 0);  yyDo(yy_3_Assign, yybegin, yyend);  goto l215;
  l218:;	  yypos= yypos215; yythunkpos= yythunkpos215;  if (!yy_CVAR()) goto l219;  yyDo(yySet, -2, 0);  if (!yy__()) goto l219;  if (!yy_ASSIGN()) goto l219;  if (!yy__()) goto l219;  if (!yy_Stmt()) goto l219;  yyDo(yySet, -1, 0);  yyDo(yy_4_Assign, yybegin, yyend);  goto l215;
  l219:;	  yypos= yypos215; yythunkpos= yythunkpos215;  if (!yy_GLOBAL()) goto l214;  yyDo(yySet, -2, 0);  if (!yy__()) goto l214;  if (!yy_ASSIGN()) goto l214;  if (!yy__()) goto l214;  if (!yy_Stmt()) goto l214;  yyDo(yySet, -1, 0);  yyDo(yy_5_Assign, yybegin, yyend);
  }
  l215:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Assign", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l214:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Assign", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Expr()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Expr"));
  {  int yypos221= yypos, yythunkpos221= yythunkpos;  if (!yy_Assign()) goto l222;  goto l221;
  l222:;	  yypos= yypos221; yythunkpos= yythunkpos221;  if (!yy_AsgnCall()) goto l223;  goto l221;
  l223:;	  yypos= yypos221; yythunkpos= yythunkpos221;  if (!yy_UnaryOp()) goto l224;  goto l221;
  l224:;	  yypos= yypos221; yythunkpos= yythunkpos221;  if (!yy_BinOp()) goto l225;  goto l221;
  l225:;	  yypos= yypos221; yythunkpos= yythunkpos221;  if (!yy_SpecCall()) goto l226;  goto l221;
  l226:;	  yypos= yypos221; yythunkpos= yythunkpos221;  if (!yy_Call()) goto l227;  goto l221;
  l227:;	  yypos= yypos221; yythunkpos= yythunkpos221;  if (!yy_Range()) goto l228;  goto l221;
  l228:;	  yypos= yypos221; yythunkpos= yythunkpos221;  if (!yy_Yield()) goto l229;  goto l221;
  l229:;	  yypos= yypos221; yythunkpos= yythunkpos221;  if (!yy_Return()) goto l230;  goto l221;
  l230:;	  yypos= yypos221; yythunkpos= yythunkpos221;  if (!yy_Break()) goto l231;  goto l221;
  l231:;	  yypos= yypos221; yythunkpos= yythunkpos221;  if (!yy_Value()) goto l220;
  }
  l221:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Expr", yybuf+yypos));
  return 1;
  l220:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Expr", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Module()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Module"));  if (!yymatchString("module")) goto l232;  if (!yy_SPACE()) goto l232;  if (!yy_CONST()) goto l232;  yyDo(yySet, -2, 0);  if (!yy_SEP()) goto l232;  if (!yy_OptStmts()) goto l232;  yyDo(yySet, -1, 0);  if (!yy__()) goto l232;  if (!yymatchString("end")) goto l232;  yyDo(yy_1_Module, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Module", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l232:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Module", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Class()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Class"));  if (!yymatchString("class")) goto l233;  if (!yy_SPACE()) goto l233;  if (!yy_CONST()) goto l233;  yyDo(yySet, -3, 0);  yyDo(yy_1_Class, yybegin, yyend);
  {  int yypos234= yypos, yythunkpos234= yythunkpos;  if (!yy__()) goto l234;  if (!yymatchChar('<')) goto l234;  if (!yy__()) goto l234;  if (!yy_CONST()) goto l234;  yyDo(yySet, -2, 0);  goto l235;
  l234:;	  yypos= yypos234; yythunkpos= yythunkpos234;
  }
  l235:;	  if (!yy_SEP()) goto l233;  if (!yy_OptStmts()) goto l233;  yyDo(yySet, -1, 0);  if (!yy__()) goto l233;  if (!yymatchString("end")) goto l233;  yyDo(yy_2_Class, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Class", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l233:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Class", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Def()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Def"));  if (!yymatchString("def")) goto l236;  if (!yy_SPACE()) goto l236;  if (!yy_Method()) goto l236;  yyDo(yySet, -3, 0);  yyDo(yy_1_Def, yybegin, yyend);
  {  int yypos237= yypos, yythunkpos237= yythunkpos;  if (!yy__()) goto l237;  if (!yymatchChar('(')) goto l237;
  {  int yypos239= yypos, yythunkpos239= yythunkpos;  if (!yy_Params()) goto l239;  yyDo(yySet, -2, 0);  goto l240;
  l239:;	  yypos= yypos239; yythunkpos= yythunkpos239;
  }
  l240:;	  if (!yymatchChar(')')) goto l237;  goto l238;
  l237:;	  yypos= yypos237; yythunkpos= yythunkpos237;
  }
  l238:;	  if (!yy_SEP()) goto l236;  if (!yy_OptStmts()) goto l236;  yyDo(yySet, -1, 0);  if (!yy__()) goto l236;  if (!yymatchString("end")) goto l236;  yyDo(yy_2_Def, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Def", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l236:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Def", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Unless()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Unless"));
  {  int yypos242= yypos, yythunkpos242= yythunkpos;  if (!yymatchString("unless")) goto l243;  if (!yy_SPACE()) goto l243;  if (!yy_Expr()) goto l243;  yyDo(yySet, -3, 0);  if (!yy_SEP()) goto l243;  yyDo(yy_1_Unless, yybegin, yyend);  if (!yy_Stmts()) goto l243;  yyDo(yySet, -2, 0);  if (!yy__()) goto l243;
  {  int yypos244= yypos, yythunkpos244= yythunkpos;  if (!yy_Else()) goto l244;  yyDo(yySet, -1, 0);  goto l245;
  l244:;	  yypos= yypos244; yythunkpos= yythunkpos244;
  }
  l245:;	  if (!yymatchString("end")) goto l243;  yyDo(yy_2_Unless, yybegin, yyend);  goto l242;
  l243:;	  yypos= yypos242; yythunkpos= yythunkpos242;  if (!yy_Expr()) goto l241;  yyDo(yySet, -2, 0);  if (!yy__()) goto l241;  if (!yymatchString("unless")) goto l241;  if (!yy__()) goto l241;  if (!yy_Expr()) goto l241;  yyDo(yySet, -3, 0);  yyDo(yy_3_Unless, yybegin, yyend);
  }
  l242:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Unless", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l241:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Unless", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_If()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "If"));
  {  int yypos247= yypos, yythunkpos247= yythunkpos;  if (!yymatchString("if")) goto l248;  if (!yy_SPACE()) goto l248;  if (!yy_Expr()) goto l248;  yyDo(yySet, -3, 0);  if (!yy_SEP()) goto l248;  yyDo(yy_1_If, yybegin, yyend);  if (!yy_Stmts()) goto l248;  yyDo(yySet, -2, 0);  if (!yy__()) goto l248;
  {  int yypos249= yypos, yythunkpos249= yythunkpos;  if (!yy_Else()) goto l249;  yyDo(yySet, -1, 0);  goto l250;
  l249:;	  yypos= yypos249; yythunkpos= yythunkpos249;
  }
  l250:;	  if (!yymatchString("end")) goto l248;  yyDo(yy_2_If, yybegin, yyend);  goto l247;
  l248:;	  yypos= yypos247; yythunkpos= yythunkpos247;  if (!yy_Expr()) goto l246;  yyDo(yySet, -2, 0);  if (!yy__()) goto l246;  if (!yymatchString("if")) goto l246;  if (!yy__()) goto l246;  if (!yy_Expr()) goto l246;  yyDo(yySet, -3, 0);  yyDo(yy_3_If, yybegin, yyend);
  }
  l247:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "If", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l246:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "If", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Until()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Until"));  if (!yymatchString("until")) goto l251;  if (!yy_SPACE()) goto l251;  if (!yy_Expr()) goto l251;  yyDo(yySet, -2, 0);  if (!yy_SEP()) goto l251;  if (!yy_Stmts()) goto l251;  yyDo(yySet, -1, 0);  if (!yy__()) goto l251;  if (!yymatchString("end")) goto l251;  yyDo(yy_1_Until, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Until", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l251:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Until", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_While()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "While"));  if (!yymatchString("while")) goto l252;  if (!yy_SPACE()) goto l252;  if (!yy_Expr()) goto l252;  yyDo(yySet, -2, 0);  if (!yy_SEP()) goto l252;  if (!yy_Stmts()) goto l252;  yyDo(yySet, -1, 0);  if (!yy__()) goto l252;  if (!yymatchString("end")) goto l252;  yyDo(yy_1_While, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "While", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l252:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "While", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_OptStmts()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "OptStmts"));
  {  int yypos254= yypos, yythunkpos254= yythunkpos;  if (!yy_Stmts()) goto l255;  goto l254;
  l255:;	  yypos= yypos254; yythunkpos= yythunkpos254;  if (!yy__()) goto l253;
  {  int yypos256= yypos, yythunkpos256= yythunkpos;  if (!yy_SEP()) goto l256;  goto l257;
  l256:;	  yypos= yypos256; yythunkpos= yythunkpos256;
  }
  l257:;	  yyDo(yy_1_OptStmts, yybegin, yyend);
  }
  l254:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "OptStmts", yybuf+yypos));
  return 1;
  l253:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OptStmts", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Comment()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Comment"));  if (!yy__()) goto l258;  if (!yymatchChar('#')) goto l258;
  l259:;	
  {  int yypos260= yypos, yythunkpos260= yythunkpos;
  {  int yypos261= yypos, yythunkpos261= yythunkpos;  if (!yy_EOL()) goto l261;  goto l260;
  l261:;	  yypos= yypos261; yythunkpos= yythunkpos261;
  }  if (!yymatchDot()) goto l260;  goto l259;
  l260:;	  yypos= yypos260; yythunkpos= yythunkpos260;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Comment", yybuf+yypos));
  return 1;
  l258:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Comment", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Stmt()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Stmt"));
  {  int yypos263= yypos, yythunkpos263= yythunkpos;  if (!yy_While()) goto l264;  goto l263;
  l264:;	  yypos= yypos263; yythunkpos= yythunkpos263;  if (!yy_Until()) goto l265;  goto l263;
  l265:;	  yypos= yypos263; yythunkpos= yythunkpos263;  if (!yy_If()) goto l266;  goto l263;
  l266:;	  yypos= yypos263; yythunkpos= yythunkpos263;  if (!yy_Unless()) goto l267;  goto l263;
  l267:;	  yypos= yypos263; yythunkpos= yythunkpos263;  if (!yy_Def()) goto l268;  goto l263;
  l268:;	  yypos= yypos263; yythunkpos= yythunkpos263;  if (!yy_Class()) goto l269;  goto l263;
  l269:;	  yypos= yypos263; yythunkpos= yythunkpos263;  if (!yy_Module()) goto l270;  goto l263;
  l270:;	  yypos= yypos263; yythunkpos= yythunkpos263;  if (!yy_Expr()) goto l262;
  }
  l263:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Stmt", yybuf+yypos));
  return 1;
  l262:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Stmt", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy__()
{
  yyprintf((stderr, "%s\n", "_"));
  l272:;	
  {  int yypos273= yypos, yythunkpos273= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l273;  goto l272;
  l273:;	  yypos= yypos273; yythunkpos= yythunkpos273;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "_", yybuf+yypos));
  return 1;
}
YY_RULE(int) yy_SEP()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "SEP"));  if (!yy__()) goto l274;
  {  int yypos277= yypos, yythunkpos277= yythunkpos;  if (!yy_Comment()) goto l277;  goto l278;
  l277:;	  yypos= yypos277; yythunkpos= yythunkpos277;
  }
  l278:;	
  {  int yypos279= yypos, yythunkpos279= yythunkpos;  if (!yy_EOL()) goto l280;  goto l279;
  l280:;	  yypos= yypos279; yythunkpos= yythunkpos279;  if (!yymatchChar(';')) goto l274;
  }
  l279:;	
  l275:;	
  {  int yypos276= yypos, yythunkpos276= yythunkpos;  if (!yy__()) goto l276;
  {  int yypos281= yypos, yythunkpos281= yythunkpos;  if (!yy_Comment()) goto l281;  goto l282;
  l281:;	  yypos= yypos281; yythunkpos= yythunkpos281;
  }
  l282:;	
  {  int yypos283= yypos, yythunkpos283= yythunkpos;  if (!yy_EOL()) goto l284;  goto l283;
  l284:;	  yypos= yypos283; yythunkpos= yythunkpos283;  if (!yymatchChar(';')) goto l276;
  }
  l283:;	  goto l275;
  l276:;	  yypos= yypos276; yythunkpos= yythunkpos276;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "SEP", yybuf+yypos));
  return 1;
  l274:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SEP", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_EOF()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "EOF"));
  {  int yypos286= yypos, yythunkpos286= yythunkpos;  if (!yymatchDot()) goto l286;  goto l285;
  l286:;	  yypos= yypos286; yythunkpos= yythunkpos286;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "EOF", yybuf+yypos));
  return 1;
  l285:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOF", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Stmts()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Stmts"));
  {  int yypos288= yypos, yythunkpos288= yythunkpos;
  l290:;	
  {  int yypos291= yypos, yythunkpos291= yythunkpos;  if (!yy_SEP()) goto l291;  goto l290;
  l291:;	  yypos= yypos291; yythunkpos= yythunkpos291;
  }  if (!yy__()) goto l289;  if (!yy_Stmt()) goto l289;  yyDo(yySet, -2, 0);
  {  int yypos292= yypos, yythunkpos292= yythunkpos;  if (!yy_Comment()) goto l292;  goto l293;
  l292:;	  yypos= yypos292; yythunkpos= yythunkpos292;
  }
  l293:;	  yyDo(yy_1_Stmts, yybegin, yyend);
  l294:;	
  {  int yypos295= yypos, yythunkpos295= yythunkpos;
  {  int yypos296= yypos, yythunkpos296= yythunkpos;  if (!yy_SEP()) goto l297;  if (!yy__()) goto l297;  if (!yy_Stmt()) goto l297;  yyDo(yySet, -1, 0);
  {  int yypos298= yypos, yythunkpos298= yythunkpos;  if (!yy_Comment()) goto l298;  goto l299;
  l298:;	  yypos= yypos298; yythunkpos= yythunkpos298;
  }
  l299:;	  yyDo(yy_2_Stmts, yybegin, yyend);  goto l296;
  l297:;	  yypos= yypos296; yythunkpos= yythunkpos296;  if (!yy_SEP()) goto l295;  if (!yy__()) goto l295;  if (!yy_Comment()) goto l295;
  }
  l296:;	  goto l294;
  l295:;	  yypos= yypos295; yythunkpos= yythunkpos295;
  }
  {  int yypos300= yypos, yythunkpos300= yythunkpos;  if (!yy_SEP()) goto l300;  goto l301;
  l300:;	  yypos= yypos300; yythunkpos= yythunkpos300;
  }
  l301:;	  yyDo(yy_3_Stmts, yybegin, yyend);  goto l288;
  l289:;	  yypos= yypos288; yythunkpos= yythunkpos288;  if (!yy_SEP()) goto l287;
  l302:;	
  {  int yypos303= yypos, yythunkpos303= yythunkpos;  if (!yy_SEP()) goto l303;  goto l302;
  l303:;	  yypos= yypos303; yythunkpos= yythunkpos303;
  }  yyDo(yy_4_Stmts, yybegin, yyend);
  }
  l288:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Stmts", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l287:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Stmts", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Root()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "Root"));  if (!yy_Stmts()) goto l304;  yyDo(yySet, -1, 0);  if (!yy_EOF()) goto l304;  yyDo(yy_1_Root, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Root", yybuf+yypos));  yyDo(yyPop, 1, 0);
  return 1;
  l304:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Root", yybuf+yypos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)();

YY_PARSE(int) YYPARSEFROM(yyrule yystart)
{
  int yyok;
  if (!yybuflen)
    {
      yybuflen= 1024;
      yybuf= YYMALLOC(yybuflen);
      yytextlen= 1024;
      yytext= YYMALLOC(yytextlen);
      yythunkslen= 32;
      yythunks= YYMALLOC(sizeof(yythunk) * yythunkslen);
      yyvalslen= 32;
      yyvals= YYMALLOC(sizeof(YYSTYPE) * yyvalslen);
      yybegin= yyend= yypos= yylimit= yythunkpos= 0;
    }
  yybegin= yyend= yypos;
  yythunkpos= 0;
  yyval= yyvals;
  yyok= yystart();
  if (yyok) yyDone();
  yyCommit();
  return yyok;
  (void)yyrefill;
  (void)yymatchDot;
  (void)yymatchChar;
  (void)yymatchString;
  (void)yymatchClass;
  (void)yyDo;
  (void)yyText;
  (void)yyDone;
  (void)yyCommit;
  (void)yyAccept;
  (void)yyPush;
  (void)yyPop;
  (void)yySet;
  (void)yytextmax;
}

YY_PARSE(int) YYPARSE(void)
{
  return YYPARSEFROM(yy_Root);
}

#endif


/* Raise a syntax error. */
OBJ yyerror() {
  VM = yyvm;
  OBJ msg = tr_sprintf(vm, "SyntaxError in %s at line %d", TR_STR_PTR(compiler->filename), compiler->line);
  /* Stupid ugly code, just to build a string... I suck... */
  if (yytext[0]) TrString_push(vm, msg, tr_sprintf(vm, " near token '%s'", yytext));
  if (yypos < yylimit) {
    yybuf[yylimit]= '\0';
    TrString_push(vm, msg, tr_sprintf(vm, " before text \""));
    while (yypos < yylimit) {
      if ('\n' == yybuf[yypos] || '\r' == yybuf[yypos]) break;
      char c[2] = { yybuf[yypos++], '\0' };
      TrString_push(vm, msg, tr_sprintf(vm, c));
    }
    TrString_push(vm, msg, tr_sprintf(vm, "\""));
  }
  /* TODO msg should not be a String object */
  tr_raise(SyntaxError, TR_STR_PTR(msg));
}

/* Compiles code to a TrBlock.
   Returns NULL on error, error is stored in TR_EXCEPTION. */
TrBlock *TrBlock_compile(VM, char *code, char *fn, size_t lineno) {
  assert(!compiler && "parser not reentrant");
  charbuf = code;
  compiler = TrCompiler_new(vm, fn);
  compiler->line += lineno;
  compiler->filename = TrString_new2(vm, fn);
  TrBlock *b = NULL;

  if (!yyparse()) {
    yyerror();
    goto error;
  }

  TrCompiler_compile(compiler);
  b = compiler->block;
error:
  charbuf = 0;
  compiler = 0;
  return b;
}

